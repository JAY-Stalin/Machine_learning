#https://anaconda.cloud/share/notebooks/98503071-7d94-4193-baea-0adf3fbb4fdd/overview
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score


from sklearn.metrics import mean_squared_error, r2_score


#Preparing the data
np.random.seed(0)
X= 2*np.random.rand(100,1)#100 samples, 1 feature
y= 4+3*X +np.random.randn(100,1)#linear relation with noise

#splitting data into training and testing sets
X_train, X_test,y_train, y_test=train_test_split(X,y,test_size=0.25,random_state=48)

#linear regression model
model=LinearRegression()
model.fit(X_train,y_train)
# Display the model's coefficients
print("Intercept (b0):", model.intercept_)
print("Coefficient (b1):", model.coef_)
#Predict on the test data
y_pred=model.predict(X_test)
print("Prediction: ",y_pred)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Calculate R-squared (coefficient of determination)
r2 = r2_score(y_test, y_pred)
print("R-squared:", r2)

# Plot the regression line
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', label='Predicted')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Linear Regression: Actual vs Predicted')
plt.legend()
plt.show()
